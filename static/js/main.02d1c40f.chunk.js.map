{"version":3,"sources":["TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["TicTacToe","state","player_turn","board","index","console","log","this","winCombos","i","length","winning_row","p1","p2","p3","alert","setState","className","map","square","onClick","squareClicked","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRA8DeA,G,wDA1DX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,YAAc,IACdC,MAAO,CAAC,GAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAJ5B,E,0DAOCC,GACVC,QAAQC,IAAIC,KAAKN,MAAMC,aACvB,IAAIA,EAAcK,KAAKN,MAAMC,YACzBC,EAAQI,KAAKN,MAAME,MAEvBA,EAAMC,GAASF,EAaf,IAXA,IAAMM,EAAY,CACd,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGHC,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAAI,CACrC,IAAIE,EAAcH,EAAUC,GACxBG,EAAKD,EAAY,GACjBE,EAAKF,EAAY,GACjBG,EAAKH,EAAY,GACN,IAAZR,EAAMS,IAAYT,EAAMS,KAAQT,EAAMU,IAAOV,EAAMU,KAAQV,EAAMW,IAAOX,EAAMW,KAAQX,EAAMS,IAC3FG,MAAM,iBAAD,OAAkBb,EAAlB,sBAIbA,EAA+B,MAAhBA,EAAuB,IAAM,IAC5CG,QAAQC,IAAI,cAAeJ,GAE3BK,KAAKS,SAAS,CACVd,YAAaA,EACbC,MAAOA,M,+BAIL,IAAD,OACL,OACI,6BACI,yCACA,yBAAKc,UAAU,SACVV,KAAKN,MAAME,MAAMe,KAAI,SAACC,EAAQf,GAC3B,OAAQ,yBAAKgB,QAAS,kBAAM,EAAKC,cAAcjB,IAAQa,UAAU,UAAS,4BAAKE,a,GAnD/EG,c,MCSTC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.02d1c40f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './TicTacToe.css'\r\n\r\nclass TicTacToe extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            player_turn : 'X',\r\n            board: ['', '','','','','','','','']\r\n        }\r\n    }\r\n    squareClicked(index){\r\n        console.log(this.state.player_turn)\r\n        let player_turn = this.state.player_turn\r\n        let board = this.state.board\r\n\r\n        board[index] = player_turn;\r\n\r\n        const winCombos = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ]\r\n\r\n        for(let i = 0; i < winCombos.length; i++){\r\n            let winning_row = winCombos[i];\r\n            let p1 = winning_row[0];\r\n            let p2 = winning_row[1]\r\n            let p3 = winning_row[2]\r\n            if(board[p1]!= '' && board[p1] === board[p2] && board[p2] === board[p3] && board[p3] === board[p1]){\r\n                alert(`winner player ${player_turn} has won the game`)\r\n            }\r\n        }\r\n\r\n        player_turn = (player_turn === 'X') ? 'O' : 'X';\r\n        console.log('player turn', player_turn);\r\n\r\n        this.setState({\r\n            player_turn: player_turn,\r\n            board: board\r\n        })\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>TicTacToe</h1>\r\n                <div className='board'>\r\n                    {this.state.board.map((square, index) => {\r\n                        return (<div onClick={() => this.squareClicked(index)} className='square'><h3>{square}</h3></div>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TicTacToe;\r\n","import React from 'react';\nimport TicTacToe from './TicTacToe';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}